% Generated by roxygen2 (4.1.0): do not edit by hand
% Please edit documentation in R/irlba.R
\name{irlba}
\alias{irlba}
\title{irlba Find a few approximate largest singular values and corresponding
singular vectors of a matrix.}
\usage{
irlba(A, nv = 5, nu, maxit = 1000, m_b = nv + 5, reorth = TRUE,
  tol = 0.001, v = NULL, right_only = FALSE, verbose = FALSE, du, ds,
  dv, shift)
}
\arguments{
\item{A}{Numeric real- or complex-valued matrix or real-valued sparse matrix}

\item{nv}{Number of right singular vectors to estimate}

\item{nu}{Number of left singular vectors to estimate (defaults to \code{nv})}

\item{maxit}{Maximum number of iterations}

\item{m_b}{Working subspace dimension, larger values can speed convergence at the cost of more memory use}

\item{reorth}{Logical value indicating full \code{TRUE} or cheaper one-sided \code{FALSE} reorthogonalization}

\item{tol}{Convergence is determined when \eqn{\|AV - US\| < tol\|A\|}{||AV - US|| < tol*||A||}, where the spectral norm ||A|| is approximated by the largest estimated singular value}

\item{v}{Optional starting vector or output from a previous run of \code{irlba} used to restart the algorithm from where it left off (see the notes)}

\item{right_only}{Logical value indicating return only the right singular vectors (\code{TRUE}) or both sets of vectors (\code{FALSE})}

\item{verbose}{Logical value that when \code{TRUE} prints status messages during the computation}

\item{du}{Optional deflation vector (see notes)}

\item{ds}{Optional deflation scalar (see notes)}

\item{dv}{Optional deflation vector (see notes)}

\item{shift}{Optional shift value (square matrices only, see ntoes)}
}
\value{
Returns a list with entries:
\itemize{
  \item{d}{max (nu, nv) approximate singular values}
  \item{u}{nu approximate left singular vectors (only when right_only=FALSE)}
  \item{v}{nv approximate right singular vectors}
  \item{iter}{The number of Lanczos iterations carried out}
  \item{mprod}{The total number of matrix vector products carried out}
}
}
\description{
The augmented implicitly restarted Lanczos bi-diagonalization (IRLBA)
algorithm finds a few approximate largest singular values and corresponding
singular vectors of a sparse or dense matrix using a method of Baglama and
Reichel.  It is a fast and memory-efficient way to compute a partial SVD.
This implementation can also estimate largest eigenvalues and corresponding
eigenvectors of a symmetric matrix.
}
\note{
The syntax of \code{irlba} partially follows \code{svd}, with an important
exception. The usual R \code{svd} function always returns a complete set of
singular values, even if the number of singular vectors \code{nu} or \code{nv}
is set less than the maximum. The \code{irlba} function returns a number of
estimated singular values equal to the maximum of the number of specified
singular vectors \code{nu} and \code{nv}.

Use the optional deflation parameters to compute the truncated SVD after
deflating by a rank 1 matrix \eqn{A - ds \cdot du dv^T}{A - ds*du \%*\% t(dv)}.
This option may be used to efficiently compute principal components without
explicitly forming the centered matrix (which can, importantly, preserve
sparsity in the matrix).

Use the \code{v} option to supply a starting vector for the iterative
method. A random vector is used by default. Optionally set \code{v} to
the ouput of a previous run of \code{irlba} to restart the method, adding
more singular values/vectors without recomputing the already computed
subspace.
}
\examples{
set.seed(1)

A <- matrix(runif(200),nrow=20)
S <- irlba(A)
S$d

# Compare with svd
svd(A)$d[1:5]

# Principal components
P <- irlba(A, nv=1, du=rep(1,nrow(A)), ds=1, dv=colMeans(A))

# Compare with prcomp (might vary up to sign)
cbind(P$v, prcomp(A)$rotation[,1])
}
\references{
Augmented Implicitly Restarted Lanczos Bidiagonalization Methods, J. Baglama and L. Reichel, SIAM J. Sci. Comput. 2005.
}
\seealso{
svd, prcomp
}

